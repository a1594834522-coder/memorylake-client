[project]
name = "memorylake"
version = "0.1.0"
description = "MemoryLake"
authors = [
    {name = "Powerdrill Authors", email = "info@powerdrill.ai"}
]
readme = "README.md"
requires-python = ">=3.9"
keywords = ["memorylake", "memory", "ai", "llm", "agent"]
license-files = ["LICENSE"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
]
dependencies = [
    "anthropic>=0.69.0",
    "httpx>=0.25.0",
    "pydantic>=2.9.2",
    "pyyaml>=6.0.1",
    "tomli>=2.0.0; python_version < '3.11'",
    "typing_extensions>=4.12.0; python_version < '3.11'",
]

[project.urls]
Homepage = "https://data.cloud/memorylake"
Repository = "https://github.com/powerdrillai/memorylake-client"

[project.optional-dependencies]
dev = [
    # Python tests
    "pytest==8.4.2",
    "pytest-asyncio==1.2.0",
    "pytest-xdist[psutil]==3.8.0",
    "pytest-cov==7.0.0",
    "pytest-dotenv==0.5.2",
    "pytest-timeout==2.4.0",
    "pytest-mock==3.15.1",
    # Python checks
    "isort==6.1.0",
    "autopep8==2.3.2",
    "basedpyright==1.31.6",
    "flake8==7.3.0",
    "pep8-naming==0.15.1",
    "mccabe==0.7.0",
    "pycodestyle==2.14.0",
    "pyflakes==3.4.0",
    # Shell checks
    "shellcheck-py==0.11.0.1",
    "shfmt-py==3.12.0.2",
    # Code spell
    "codespell==2.4.1",
]

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

# ================================================================
# Configurations for setuptools
# ================================================================
[tool.setuptools.packages.find]
where = ["."]
include = ["memorylake"]

# ================================================================
# Configurations for pytest
# ================================================================
[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["memorylake"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
log_cli_level = "INFO"
verbosity_assertions = 2
verbosity_test_cases = 2
addopts = [
    # pytest-xdist will force pytest stdout/stderr capture (aka. disables -s/--capture=no),
    # which is inconvenient for local development.
    # We disable pytest-xdist by default, and only use it in CICD pipeline.
    "-s", # "-n", "logical",

    "--strict-config",

    # Do not use `-W error` here, because it would make "filterwarnings" below ineffective.
    # Instead, we specify "error" in "filterwarnings", and make sure it's the last one to be applied.
    # "-W", "error",
]

# Load environment variables from .env file for tests
env_files = ["cicd/ci-test.env"]

# PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
# The event loop scope for asynchronous fixtures will default to the fixture caching scope.
# Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope.
# Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. 
# Valid fixture loop scopes are: "function", "class", "module", "package", "session"
asyncio_default_fixture_loop_scope = "function"
asyncio_default_test_loop_scope = "function"

filterwarnings = [
    # The order of these filters is important:
    # The filters are applied in **REVERSED** order (a stack).
    # So 'error' must appear first, so it's the last one to be applied (otherwise no ignore directive would work).
    'error',

    # ======== FORMAT: "action:message_regex:category:module_regex:line" ========

    # `botocore` uses `datetime.datetime.utcnow()` in some places, which is deprecated since Python 3.12
    # This issue is raised since 2023/10, but still not fixed as of 2025/04 :(
    # See https://github.com/boto/boto3/issues/3889
    # See also `memorylake/common/base/compat.py`
    # 'ignore:datetime.datetime.utcnow\(\) is deprecated:DeprecationWarning',

    # `langchain_openai.OpenAIEmbedding` uses `pydantic.BaseModel.dict()` in some places, which is deprecated.
    # See https://github.com/langchain-ai/langchain/issues/15997
    # See also `memorylake/common/base/compat.py`
    # 'ignore:The `dict` method is deprecated; use `model_dump` instead:pydantic.warnings.PydanticDeprecatedSince20:langchain_openai\.embeddings\.base',

    # ResourceWarnings from socket connections during tests - these are harmless during test cleanup
    # Like: "ResourceWarning: unclosed <socket.socket fd=10, family=1, type=1, proto=0>"
    # 'ignore:unclosed <socket\.socket.*:ResourceWarning',

    # ResourceWarnings from asyncio during tests - these are harmless during test cleanup
    # Like: "ResourceWarning: unclosed event loop <_UnixSelectorEventLoop running=False closed=False debug=False>"
    # 'ignore:unclosed event loop.*:ResourceWarning',
]

# ================================================================
# Configurations for autopep8
# ================================================================
[tool.autopep8]
max-line-length = 160
in-place = true
recursive = true

# ================================================================
# Configurations for isort
# ================================================================
[tool.isort]
profile = "black"  # make sure to be compatible with PEP 8 and Black
line_length = 160
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true  # respect .gitignore
skip_glob = [
    "*venv"
]
skip = [
    "third_party",
]

# ================================================================
# Configurations for basedpyright
# ================================================================
[tool.pyright]
include = ["memorylake", "scripts"]  # do not check "cicd", "snippets"
exclude = [
    "**/node_modules",
    "**/__pycache__",
]

pythonVersion = "3.9"  # This may be overriden in `cicd/check-basedpyright.sh`
pythonPlatform = "All"

executionEnvironments = [
  { root = "." }
]

allowedUntypedLibraries = [
    "lz4",
    "lz4.frame",
    "lz4.block",
]

reportAny = false
reportExplicitAny = false
reportUnusedCallResult = false
reportImplicitAbstractClass = false
reportUnreachable = false
reportUnnecessaryIsInstance = false

# We actually generally want this check, but want to disable it for some files (like __init__.py and conftest.py).
# However, (based)pyright does not support per-file configuration yet...
# Fortunately, flake8 checks unused imports too, and supports per-file configuration.
# So we use flake8 to check unused imports, and disable this check in (based)pyright here.
reportUnusedImport = false

# ================================================================
# Configurations for coverage
# ================================================================
[tool.coverage.report]
include = [
    "memorylake/**",
]
omit = [
    "**/conftest.py",  # ignore conftest.py
    "**/test_*.py",  # ignore test_xxx.py themselves
]

[tool.coverage.run]
# NOTE: When using --concurrency=multiprocessing, you must set your other options in the configuration file.
# Options on the command line will not be passed to the processes that multiprocessing creates.
# Best practice is to use the configuration file for all options.
concurrency = ["thread", "multiprocessing"]
